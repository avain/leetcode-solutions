
#include <vector>
#include <tuple>
#include <queue>
#include <iostream>

using namespace std;

class Solution {
public:
    vector<vector<int>> calcWater(const vector<vector<int>>& height) {
        typedef std::tuple<int, int, int> Info;
        auto comp = [](const Info& a, const Info& b) {
            return std::get<0>(a) > std::get<0>(b);
        };
        priority_queue<Info, vector<Info>, decltype(comp)> queue(comp);
        vector<vector<int>> level(height.size(), vector<int>(height[0].size(), INT_MAX));

        for (int i = 0; i < height.size(); i++) {
            int n = height[0].size() - 1;
            level[i][0] = height[i][0];
            queue.emplace(height[i][0], i, 0);
            level[i][n] = height[i][n];
            queue.emplace(height[i][n], i, n);
        }
        for (int j = 0; j < height.size(); j++) {
            int n = height.size() - 1;
            level[0][j] = height[0][j];
            queue.emplace(height[0][j], 0, j);
            level[n][j] = height[n][j];
            queue.emplace(height[n][j], n, j);
        }

        vector<pair<int, int>> coords{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while(!queue.empty()) {
            int l, x, y;
            std::tie(l, x, y) = queue.top();
            queue.pop();
            for (const pair<int, int>& c: coords) {
                int new_x = x + c.first;
                int new_y = y + c.second;
                if (new_x < 0 || new_x >= height.size() ||
                    new_y < 0 || new_y >= height[0].size()) {
                    continue;
                }
                if (l < level[new_x][new_y]) {
                    int newLevel = std::max(height[new_x][new_y], l);
                    if (newLevel < level[new_x][new_y]) {
                        level[new_x][new_y] = newLevel;
                        queue.emplace(newLevel, new_x, new_y);
                    }
                }
            }
        }

        return level;
    }

    int trapRainWater(const vector<vector<int>>& heightMap) {
        int water = 0;
        auto levels = calcWater(heightMap);
        for (int x = 0; x < heightMap.size(); x++) {
            for (int y = 0; y < heightMap.size(); y++) {
                water += std::max(0, levels[x][y] - heightMap[x][y]);
            }
        }
        return water;
    }
};

int main() {
    vector<vector<int>> heights {{1102,1102,1109,1105,1105,1104,1106,1103,1101,1102,1100,1106,1105,1101,1109,1104,1104,1106,1108,1101,1100,1108,1101,1102,1109,1108,1108,1106,1108,1102,1100,1102,1104,1109,1108,1101,1105,1106,1104,1106,1108,1106,1103,1105,1107,1104,1102,1104,1100,1102},{1107,442,450,461,896,181,309,914,299,499,956,549,794,592,860,282,53,996,878,329,202,828,686,667,263,885,473,225,629,935,279,887,719,719,690,605,242,341,510,532,830,456,423,966,39,274,238,434,260,458},{1104,804,628,782,814,882,657,277,449,629,203,719,858,264,780,538,860,365,869,360,239,41,158,652,998,187,916,578,964,518,379,708,313,997,480,117,221,479,736,13,450,281,74,298,536,196,826,386,551,37},{1108,132,69,236,775,409,414,33,977,368,542,698,418,197,686,240,304,249,61,382,252,502,654,316,790,532,503,959,908,396,338,986,519,397,212,636,148,968,659,468,678,191,156,438,730,184,668,24,424,72},{1109,666,564,745,325,344,267,170,645,517,556,974,493,65,713,47,43,852,358,693,310,378,226,456,159,947,631,169,313,397,231,52,53,785,787,720,472,396,880,107,903,427,71,738,834,127,776,868,969,476},{1103,269,196,119,67,345,56,40,505,712,427,726,106,823,502,884,533,316,270,404,413,516,173,827,244,349,944,362,559,903,828,452,514,15,914,923,702,312,954,197,14,371,266,111,536,758,337,60,64,949},{1106,819,455,321,636,690,12,922,42,562,167,213,356,671,570,260,937,262,563,881,450,567,594,58,20,121,158,347,523,564,287,671,373,84,334,352,764,336,264,149,888,774,352,235,787,912,837,714,164,390},{1105,956,300,170,1004,310,633,152,1000,498,706,629,159,422,703,835,764,458,161,370,597,392,134,939,969,912,193,796,616,347,177,544,646,819,56,640,119,679,135,461,167,183,80,668,595,774,493,349,574,996},{1102,513,378,186,442,337,440,977,476,47,314,643,581,302,804,627,285,265,648,410,717,157,583,787,167,169,903,1002,860,467,988,912,970,357,441,754,36,871,721,502,908,378,487,831,670,281,800,297,889,790},{1107,596,289,623,373,446,134,619,438,984,76,769,239,37,468,670,781,494,883,845,339,134,213,168,955,225,792,98,513,671,878,552,257,510,165,972,946,641,581,727,968,648,486,197,27,944,209,150,780,82},{1107,461,206,892,620,504,108,402,592,963,63,812,857,662,664,365,624,601,996,548,670,954,538,498,493,555,432,44,47,554,117,375,1006,665,257,616,159,707,360,93,12,413,248,860,65,902,215,31,845,201},{1101,505,498,449,993,333,346,767,368,736,312,475,101,660,130,700,618,632,398,968,67,400,371,305,250,778,550,807,151,385,351,63,233,839,854,568,162,543,326,520,269,980,337,360,982,810,50,590,784,790},{1108,841,181,909,489,773,29,29,571,522,756,264,927,979,93,772,538,597,305,206,460,564,176,139,266,148,939,306,728,65,439,618,897,610,517,728,725,888,747,638,400,845,892,318,815,327,432,695,267,79},{1101,717,633,409,846,889,899,128,537,617,183,966,225,422,918,84,140,986,314,229,966,56,65,849,716,222,518,138,907,775,207,140,482,182,539,671,413,428,141,293,387,666,601,954,79,862,380,561,838,36},{1103,794,82,540,985,789,104,494,269,1001,259,819,483,84,991,12,745,747,782,876,30,511,884,621,455,953,825,177,857,653,203,332,790,627,214,117,406,308,601,18,299,203,827,772,277,160,126,364,897,250},{1102,269,751,456,233,548,752,48,715,599,692,260,273,824,877,477,931,626,775,875,634,416,68,451,530,335,601,998,689,841,238,261,100,979,707,323,869,801,362,926,742,396,176,1005,210,395,824,483,11,589},{1108,987,347,406,428,867,83,372,855,114,203,435,717,645,756,415,959,615,558,663,883,291,49,49,286,601,787,101,74,140,32,765,118,370,161,536,579,587,250,425,691,443,202,399,79,949,156,380,906,704},{1103,780,985,424,171,614,15,948,705,431,79,79,186,187,439,690,65,1009,267,306,776,948,91,968,689,512,259,835,234,156,882,257,926,857,671,87,461,28,26,508,450,447,578,626,976,359,306,31,358,915},{1109,476,206,761,787,885,615,36,63,840,182,935,439,98,782,453,528,586,471,896,436,911,333,1004,880,299,706,528,672,406,434,342,873,630,445,650,857,402,28,910,232,553,835,14,993,960,457,511,888,918},{1107,314,172,72,661,42,361,357,912,376,753,336,60,968,308,847,960,508,239,979,408,814,522,586,818,857,888,265,359,118,173,746,774,687,161,425,719,864,124,622,230,220,300,280,178,951,117,481,449,699},{1100,199,503,314,127,663,161,357,918,862,465,433,951,582,111,102,349,172,956,464,136,529,26,779,799,194,720,259,665,511,300,457,52,793,113,522,798,617,221,706,821,29,481,762,601,934,206,940,97,153},{1106,575,672,762,344,813,299,406,414,306,907,704,106,302,839,209,166,627,168,377,675,332,396,147,84,987,71,281,918,510,776,1006,76,790,759,410,945,48,807,350,344,56,396,440,700,226,992,856,195,502},{1104,861,824,962,350,251,940,763,874,200,264,640,196,682,772,297,82,707,335,231,399,670,630,786,452,320,1002,434,519,539,279,85,390,93,37,730,334,319,484,198,509,90,180,48,762,942,335,186,992,661},{1108,381,673,380,157,467,42,501,244,551,31,513,626,763,948,1006,836,273,315,662,813,167,742,336,205,846,268,530,22,602,533,772,974,548,142,473,358,175,317,592,68,338,447,37,443,385,33,269,1000,338},{1101,156,495,1005,482,42,841,92,915,206,685,438,968,649,329,453,464,677,970,771,611,380,451,48,407,885,423,430,496,766,111,408,912,948,755,384,333,939,466,238,135,141,18,445,132,689,240,587,356,200},{1100,957,923,142,347,320,17,761,93,503,517,546,253,419,836,999,145,159,928,601,387,405,733,748,840,207,427,423,784,126,965,475,425,878,959,763,189,966,866,624,811,725,160,407,486,986,748,621,136,18},{1102,865,413,287,603,595,485,21,1008,611,137,316,428,552,184,377,657,363,333,513,977,487,228,479,236,704,456,974,315,934,982,870,789,737,147,735,674,974,746,25,576,225,331,994,119,505,362,767,211,37},{1100,530,866,841,1000,92,535,798,56,193,722,380,53,501,459,542,226,476,507,314,491,73,881,164,409,991,11,761,100,212,141,712,85,997,543,75,80,421,215,478,956,927,201,999,770,1002,883,339,468,380},{1103,301,795,867,807,547,200,809,298,290,363,781,344,438,769,230,855,191,993,60,11,939,329,202,280,90,547,153,419,357,876,404,649,13,613,798,550,803,597,191,435,951,962,122,731,73,342,577,254,325},{1109,256,254,299,800,524,731,337,19,140,685,885,886,676,241,490,464,781,635,52,314,413,345,267,525,66,682,857,985,927,524,955,173,768,596,963,634,317,291,643,799,318,871,27,984,102,859,438,225,485},{1102,882,240,167,491,755,576,163,602,551,80,468,848,595,226,434,549,202,93,182,187,882,842,48,252,816,492,101,596,60,928,419,932,158,928,765,255,494,918,199,388,989,657,226,574,225,1003,465,417,86},{1109,595,311,821,985,905,979,820,996,566,222,267,327,496,767,245,251,13,82,159,202,460,490,850,28,407,65,21,214,825,450,194,410,103,357,737,998,327,547,984,883,111,593,200,597,351,787,838,706,211},{1100,898,13,820,90,32,569,146,395,774,313,187,310,65,280,657,792,268,974,682,595,847,783,178,389,371,871,519,199,567,720,529,456,76,692,888,98,251,376,835,367,679,13,667,734,635,315,517,894,279},{1101,479,469,314,999,200,675,861,61,217,418,772,88,216,838,770,95,278,364,461,455,721,131,810,379,855,436,36,714,672,305,245,141,116,550,130,659,567,333,710,126,742,824,205,300,652,317,385,272,23},{1109,70,87,310,870,456,507,648,834,564,310,481,799,441,588,691,914,589,601,237,289,717,321,104,264,612,98,924,339,713,289,518,773,366,170,985,164,20,624,988,574,924,460,363,708,390,397,964,969,988},{1103,248,47,855,694,654,809,783,568,138,838,847,999,601,556,159,928,710,169,542,689,733,809,139,439,507,519,826,813,830,156,346,68,193,543,105,837,342,230,747,823,58,937,812,1001,483,313,919,535,473},{1102,214,548,603,695,329,452,556,497,255,376,643,591,787,179,125,882,358,809,102,448,622,150,375,424,141,200,80,402,725,543,196,282,433,789,967,105,231,514,592,828,232,578,762,1009,99,229,881,799,28},{1105,237,993,465,954,759,948,144,829,693,212,714,879,484,138,659,793,233,232,649,167,403,872,735,155,223,176,374,447,966,744,762,193,727,570,490,477,860,976,296,543,178,1001,413,1004,481,414,788,56,988},{1107,565,381,289,643,878,503,809,594,292,765,329,44,301,398,604,781,217,807,99,504,340,268,847,95,614,670,499,392,68,830,810,623,201,441,256,422,286,56,1006,568,163,677,955,454,66,901,577,273,698},{1109,119,29,629,308,466,233,968,308,616,26,128,768,992,671,551,238,83,828,636,80,738,790,747,683,586,155,575,506,419,263,515,880,634,134,179,443,357,137,741,315,506,859,73,488,520,967,68,946,785},{1105,368,513,475,457,539,51,603,104,547,364,709,404,234,686,528,755,119,228,235,202,533,731,51,949,561,913,906,619,201,33,304,559,888,121,1007,769,163,600,863,52,306,915,799,882,943,317,628,404,887},{1103,596,763,926,989,702,477,892,950,438,84,325,733,985,555,844,982,315,349,924,520,744,220,425,533,445,710,192,63,104,70,906,42,823,822,21,867,641,904,159,69,330,826,144,305,371,331,630,676,22},{1106,187,756,459,954,631,894,655,166,947,101,226,195,134,391,359,497,600,990,391,101,401,63,917,536,711,278,857,683,297,221,569,474,320,18,770,941,254,767,97,543,859,665,728,335,398,77,822,988,409},{1106,79,801,961,338,679,14,607,878,687,894,89,599,710,399,959,470,683,204,228,122,737,429,130,456,106,518,875,270,849,627,816,270,418,120,599,439,124,548,307,802,784,738,391,484,128,340,296,153,886},{1106,265,614,637,737,412,85,246,629,346,437,246,504,697,654,614,286,83,729,176,732,873,950,461,606,776,931,288,415,74,165,271,681,121,251,409,523,326,997,142,14,424,731,509,111,375,465,740,801,536},{1106,875,399,847,326,347,613,599,626,18,15,133,632,687,596,225,438,461,893,425,593,898,839,666,749,292,32,204,22,175,731,919,392,472,756,61,810,711,650,778,72,656,253,46,685,839,613,113,290,496},{1108,225,736,709,882,475,991,256,670,1004,773,391,265,155,853,363,206,1005,64,199,773,478,845,368,866,520,197,469,975,477,956,493,693,682,544,917,148,525,163,160,519,926,893,774,71,88,479,620,84,534},{1109,199,354,644,558,211,506,745,670,471,565,968,306,600,641,840,507,131,707,660,633,569,928,516,685,341,594,155,951,20,679,750,210,375,736,110,576,584,845,237,397,752,547,693,342,178,875,839,651,573},{1101,274,132,759,780,159,91,717,304,32,727,325,125,927,691,203,27,257,778,215,836,165,957,374,201,642,894,66,471,888,981,655,152,455,404,275,605,837,982,899,212,699,215,327,969,896,520,338,495,640},{1105,674,796,195,390,987,827,274,395,640,152,719,285,647,164,32,912,111,859,236,1001,61,277,558,730,236,796,593,917,281,223,802,297,361,339,677,690,156,942,76,787,436,137,414,73,291,436,327,745,638}};
    std::cout << Solution().trapRainWater(heights) << std::endl;
    return 0;
}
